version: "3.7"
services:
  db:
    container_name: portal-database
    restart: unless-stopped
    image: postgres
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down
    expose:
      - "5432"
  frontend:
    container_name: portal-frontend
    restart: "no"
    image: "node:14"
    user: "node" # for ubuntu, use root
    working_dir: /home/node/app
    volumes:
      - ./:/home/node/app
    command: >
      sh -c "cd server && npm install && npm run build:frontend"
    networks:
      - root_proxy-nety
  backend:
    container_name: portal-backend
    restart: unless-stopped
    image: "node:14"
    depends_on:
      - db
    expose:
      - "80"
    user: "root" # for ubuntu, use root
    working_dir: /home/node/app
    volumes:
      - ./:/home/node/app
    command: >
      sh -c "cd server && npm install && npm run db:migrate && npm run db:seed && npm start"
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: $VIRTUAL_HOST
      #NODE_ENV: production
      DATABASE_URL: "db"
      DATABASE_PASSWORD: $POSTGRES_PASSWORD
      DATABASE_USER: $POSTGRES_USER
      DATABASE_NAME: $POSTGRES_DB
      LOGGING: "true"
      PORT: 80
    networks:
      - root_proxy-nety
volumes:
  database-data: # named volumes can be managed easier using docker-compose
  
networks:
  root_proxy-nety:
    external: true
